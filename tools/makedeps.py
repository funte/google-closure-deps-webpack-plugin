#!/usr/bin/python
#encoding: utf-8

import sys, os, threading, re, logging, enum, types, argparse
if sys.version_info[0] != 3:
  raise Exception('请使用 Python3!!')
import importlib


def importPath(fullpath):
  """从指定路径导入一个文件/模块.

  Args:
      fullpath: 要导入的文件路径,包含文件名.可以是相对或绝对路径.

  Returns:
      导入的模块.
  """
  path, filename = os.path.split(fullpath)
  filename, ext = os.path.splitext(filename)
  sys.path.append(path)
  module = importlib.__import__(filename)
  importlib.reload(module)
  del sys.path[-1]
  return module


def _GetOptionParse():
  parser = argparse.ArgumentParser(__doc__)
  parser.add_argument('-o', '--output', 
                      dest='output',
                      required=True,
                      help='Full path for Closure deps.js file')
  parser.add_argument('-r', '--roots',
                      dest='roots',
                      default=[],
                      nargs='+',
                      help='Directories list for search dependencies')
  parser.add_argument('-j', '--js_paths',
                      dest='js_paths',
                      default=[],
                      nargs='+',
                      help='JavaScript sources files for search dependencies')
  parser.add_argument('-e', '--excludes',
                      dest='excludes',
                      default=[],
                      nargs='+',
                      help='Excludes files list')
  parser.add_argument('-g', '--goog',
                      dest='goog',
                      required=True,
                      help='Path to Closure Library bootstrap file base.js')
  return parser


args = _GetOptionParse().parse_args()
goog_dir, filename = os.path.split(args.goog)
closure_dir = os.path.abspath(os.path.join(goog_dir, '../../'))
depstree = importPath(os.path.join(closure_dir, 'closure/bin/build/depstree.py'))
depswriter = importPath(os.path.join(closure_dir, 'closure/bin/build/depswriter.py'))
treescan = importPath(os.path.join(closure_dir, 'closure/bin/build/treescan.py'))
source = importPath(os.path.join(closure_dir, 'closure/bin/build/source.py'))


class _PathSource(source.Source):
  """Source file subclass that remembers its file path."""

  def __init__(self, path):
    """Initialize a source.

    Args:
      path: str, Path to a JavaScript file.  The source string will be read
        from this file.
    """
    super(_PathSource, self).__init__(source.GetFileContents(path))

    self._path = path

  def __str__(self):
    return 'PathSource %s' % self._path

  def GetPath(self):
    """Returns the path."""
    return self._path


def _FindSource(roots=[], js_paths=[], excludes=[]):
  """Find source file.
  
  Args:
    roots: 查找依赖项的目录.
    js_paths: 包含依赖项的文件.
    excludes: 要忽略的文件..

  Returns:
    A set of _PathSource objects.
  """
  sources = set()
  # 扫描目录.
  if roots:
    for root in roots:
      for js_path in treescan.ScanTreeForJsFiles(root):
        # Avoid backslash.
        sources.add(_PathSource(js_path.replace('\\', '/')))
  # 扫描文件.
  if js_paths:
    for js_path in js_paths:
      # Avoid backslash.
      sources.add(_PathSource(js_path.replace('\\', '/')))
  
  # 忽略指定文件.
  def _exclude(source):
    path, filename = os.path.split(source.GetPath())
    return not filename in excludes
  if excludes:
    sources = [source for source in sources if _exclude(source)]
  
  return sources


if  __name__ == '__main__':
  # Find source.
  sources = _FindSource(args.roots, args.js_paths, args.excludes)

  # Build source map.
  source_map = {}
  for source in sources:
    # Avoid backslash.
    source_path = os.path.relpath(source.GetPath(), goog_dir)
    source_map[source_path] = source
  # Build dependency line.
  add_dependency = depswriter.MakeDepsFile(source_map).replace('\\', '/')
  

  output_dir, output_name = os.path.split(args.output)
  os.makedirs(output_dir, exist_ok=True)
  f = open(args.output, 'w', encoding='utf-8')
  f.write('// Do not edit this file; automatically generated by google-closure-deps-webpack-plugin!!\n\n' + add_dependency)
  f.close()
